template<class Obtype>
VALUE method_abstract_model_get_number_of_parameters (VALUE self) {
	Obtype *r;
	Data_Get_Struct(self, Obtype, r);
	return INT2FIX(r->getModel()->numberOfParameters());
}
template<class Obtype>
VALUE method_abstract_model_get_parameter_vector (VALUE self) {
	Obtype *r;
	Data_Get_Struct(self, Obtype, r);
	return wrap_pointer<rb_RealVector>(
		rb_RealVector::rb_class(),
		new rb_RealVector(r->getModel()->parameterVector())
	);
}
template<class Obtype>
VALUE method_abstract_model_set_parameter_vector (VALUE self, VALUE rb_parameter_vector) {
	Obtype *r;
	Data_Get_Struct(self, Obtype, r);
	try {
		if (TYPE(rb_parameter_vector) == T_DATA) {
			if (CLASS_OF(rb_parameter_vector) == rb_RealVector::rb_class()) {
				rb_RealVector *v;
				Data_Get_Struct(rb_parameter_vector, rb_RealVector, v);
				r->getModel()->setParameterVector(*(v->getData()));
			} else if (CLASS_OF(rb_parameter_vector) == rb_RealVectorReference::rb_class()) {
				rb_RealVectorReference *v;
				Data_Get_Struct(rb_parameter_vector, rb_RealVectorReference, v);
				r->getModel()->setParameterVector(*(v->getData()));
			} else if (CLASS_OF(rb_parameter_vector) == rb_RealMatrixRow::rb_class()) {
				rb_RealMatrixRow *v;
				Data_Get_Struct(rb_parameter_vector, rb_RealMatrixRow, v);
				r->getModel()->setParameterVector(*(v->getData()));
			} else if (CLASS_OF(rb_parameter_vector) == rb_RealMatrixColumn::rb_class()) {
				rb_RealMatrixColumn *v;
				Data_Get_Struct(rb_parameter_vector, rb_RealMatrixColumn, v);
				r->getModel()->setParameterVector(*(v->getData()));
			} else {
				rb_raise(rb_eArgError, "Can only assign RealVector/Array/RealMatrixRow/RealMatrixColumn.");
			}
		} else if (TYPE(rb_parameter_vector) == T_ARRAY) {
			if (TYPE(rb_ary_entry(rb_parameter_vector, 0)) != T_FIXNUM && TYPE(rb_ary_entry(rb_parameter_vector, 0)) != T_FLOAT)
				rb_raise(rb_eArgError, "Can only assign floats.");
			RealVector vec = rb_ary_to_1d_realvector(rb_parameter_vector);
			r->getModel()->setParameterVector(vec);
		} else {
			rb_raise(rb_eArgError, "Can only assign RealVector/Array/RealMatrixRow/RealMatrixColumn.");
		}
	} catch (shark::Exception e) {
		rb_raise(rb_eRuntimeError, (std::string(e.what()) + "\nCheck that the the parameter vector you are setting corresponds to the expected format of %s").c_str(), rb_class2name(Obtype::rb_class()));
	}
	return self;
}

template<class Obtype>
void InitAbstractModel() {
	rb_define_method(Obtype::rb_class(), "parameter_vector=", (rb_method) method_abstract_model_set_parameter_vector<Obtype>, 1);
	rb_define_method(Obtype::rb_class(), "parameter_vector", (rb_method) method_abstract_model_get_parameter_vector<Obtype>, 0);
	rb_define_method(Obtype::rb_class(), "number_of_parameters", (rb_method) method_abstract_model_get_number_of_parameters<Obtype>, 0);
}