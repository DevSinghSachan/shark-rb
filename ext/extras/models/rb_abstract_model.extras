template<class Obtype>
VALUE method_abstract_model_get_number_of_parameters (VALUE self) {
	Obtype *r;
	Data_Get_Struct(self, Obtype, r);
	return INT2FIX(r->getModel()->numberOfParameters());
}
template<class Obtype>
VALUE method_abstract_model_get_parameter_vector (VALUE self) {
	Obtype *r;
	Data_Get_Struct(self, Obtype, r);
	return wrap_pointer<rb_RealVector>(
		rb_RealVector::rb_class(),
		new rb_RealVector(r->getModel()->parameterVector())
	);
}
template<class Obtype>
VALUE method_abstract_model_set_parameter_vector (VALUE self, VALUE rb_parameter_vector) {
	Obtype *r;
	Data_Get_Struct(self, Obtype, r);

	Check_Type(rb_parameter_vector, T_DATA);
	if (CLASS_OF(rb_parameter_vector) != rb_RealVector::rb_class())
		rb_raise(rb_eArgError, "%s's parameter vector can only be set using a RealVector.", rb_obj_classname(self));

	rb_RealVector *vec;
	Data_Get_Struct(rb_parameter_vector, rb_RealVector, vec);

	r->getModel()->setParameterVector(vec->data);
	return self;
}

template<class Obtype>
void InitAbstractModel() {
	rb_define_method(Obtype::rb_class(), "parameter_vector=", (rb_method) method_abstract_model_set_parameter_vector<Obtype>, 1);
	rb_define_method(Obtype::rb_class(), "parameter_vector", (rb_method) method_abstract_model_get_parameter_vector<Obtype>, 0);
	rb_define_method(Obtype::rb_class(), "number_of_parameters", (rb_method) method_abstract_model_get_number_of_parameters<Obtype>, 0);
}