#include "rb_vector_length.extras"
#include "../utils/rb_datatype_deep_copy.extras"

extern void exportPGM( const char *, const RealVector &, int, int, bool);


template<class Obtype>
VALUE method_vector_get_sqrt (VALUE self) {
	Obtype *m;
	Data_Get_Struct(self, Obtype, m);
	return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(sqrt(*(m->getData())))
			);
}

template<class Obtype>
VALUE method_vector_get_exp (VALUE self) {
	Obtype *m;
	Data_Get_Struct(self, Obtype, m);
	return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(exp(*(m->getData())))
			);
}

template<class Obtype>
VALUE method_vector_get_max (VALUE self) {
	Obtype *m;
	Data_Get_Struct(self, Obtype, m);
	return m->getData()->size() > 0 ? rb_float_new(max(*(m->getData()))) : Qnil;
}

template<class Obtype>
VALUE method_vector_get_min (VALUE self) {
	Obtype *m;
	Data_Get_Struct(self, Obtype, m);
	return m->getData()->size() > 0 ? rb_float_new(min(*(m->getData()))) : Qnil;
}


template<class Obtype>
static Obtype log(Obtype & _vec) {

	Obtype _log_vec = _vec;

	for (size_t i=0;i < _vec.size();i++)
		_log_vec(i) = std::log(_vec(i));

	return _log_vec;
}

template<class Obtype>
VALUE method_vector_get_log (VALUE self) {
	Obtype *m;
	Data_Get_Struct(self, Obtype, m);
	return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(log<>(*(m->getData())))
			);
}

template<class Obtype>
VALUE method_vector_get_sum (VALUE self) {
	Obtype *m;
	Data_Get_Struct(self, Obtype, m);
	return rb_float_new(sum(*(m->getData())));
}

template<class Obtype>
static double mean(Obtype& m) {
	double total = 0.0;
	for (size_t i=0;i < m.size();i++)
		total += m[i];
	if (m.size() > 0)
		total /= m.size();
	return total;
}

template<class Obtype>
VALUE method_vector_get_mean (VALUE self) {
	Obtype *m;
	Data_Get_Struct(self, Obtype, m);
	return rb_float_new(mean(*(m->getData())));
}

template<class Obtype>
VALUE method_vector_get_inverse (VALUE self) {
	Obtype *m;
	Data_Get_Struct(self, Obtype, m);
	return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(shark::blas::pow(*(m->getData()), -1))
			);
}

template<class Obtype>
VALUE method_vector_get_pow (VALUE self, VALUE rb_pow) {
	if (TYPE(rb_pow) != T_FLOAT && TYPE(rb_pow) != T_FIXNUM)
		rb_raise(rb_eArgError, "This vector can only be raised to a power by a scalar.");
	Obtype *m;
	Data_Get_Struct(self, Obtype, m);
	return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(shark::blas::pow(*(m->getData()), NUM2DBL(rb_pow)))
			);
}

template<class Obtype>
VALUE method_vector_remove_NaN (int number_of_arguments, VALUE* ruby_arguments, VALUE self) {
	VALUE rb_replacement;
	rb_scan_args(
		number_of_arguments,
		ruby_arguments,
		"01",
		&rb_replacement);
	double replacement = 0.0;
	if (rb_replacement != Qnil) {
		if (TYPE(rb_replacement) != T_FLOAT && TYPE(rb_replacement) != T_FIXNUM)
			rb_raise(rb_eArgError, "Can only replace NaN by floats.");
		replacement = NUM2DBL(rb_replacement);
	}
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);
	for (size_t i = 0;i< s->getData()->size();i++)
		if ((*(s->getData()))(i) != (*(s->getData()))(i))
			(*(s->getData()))(i) = replacement;
	return self;
}


template<class Obtype>
VALUE method_vector_clear (VALUE self) {
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);
	s->getData()->clear();
	return self;
}

template<class Obtype>
VALUE method_vector_export_pgm (VALUE self, VALUE data_hash) {
	Check_Type(data_hash, T_HASH);
	VALUE rb_path   = rb_hash_aref(data_hash, rb_sym_new("path"));
	VALUE rb_height = rb_hash_aref(data_hash, rb_sym_new("height"));
	VALUE rb_width  = rb_hash_aref(data_hash, rb_sym_new("width"));
	VALUE normalize = rb_hash_aref(data_hash, rb_sym_new("normalize"));

	Obtype *v;
	Data_Get_Struct(self, Obtype, v);

	Check_Type(rb_height, T_FIXNUM);
	Check_Type(rb_width, T_FIXNUM);
	Check_Type(rb_path, T_STRING);
	try {
		exportPGM(StringValueCStr(rb_path), *(v->getData()), NUM2INT(rb_width), NUM2INT(rb_height), normalize == Qtrue);
		return self;
	} catch (...) {
		rb_raise(rb_eRuntimeError, "Could not write PGM file.");
		return self;
	}
}

template<class Obtype>
VALUE method_vector_multiply (VALUE self, VALUE multiplier) {
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);

	if (TYPE(multiplier) == T_FLOAT || TYPE(multiplier) == T_FIXNUM) {
		return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(*(s->getData()) * NUM2DBL(multiplier))
			);
	} else if (TYPE(multiplier) == T_DATA && CLASS_OF(multiplier) == rb_RealVector::rb_class()) {
		rb_RealVector *o;
		Data_Get_Struct(multiplier, rb_RealVector, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To multiply RealVectors together, use vectors of the same length.");

		return rb_float_new(inner_prod(*(s->getData()), *(o->getData())));

	} else if (TYPE(multiplier) == T_DATA && CLASS_OF(multiplier) == rb_RealVectorReference::rb_class()) {
		rb_RealVectorReference *o;
		Data_Get_Struct(multiplier, rb_RealVectorReference, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To multiply RealVectors together, use vectors of the same length.");

		return rb_float_new(inner_prod(*(s->getData()), *(o->getData())));

	} else if (TYPE(multiplier) == T_ARRAY) {

		if (RARRAY_LEN(multiplier) != (int)s->getData()->size())
			rb_raise(rb_eArgError, "To multiply RealVectors together, use vectors of the same length.");

		RealVector vec_multiplier = rb_ary_to_1d_realvector(multiplier);
		return rb_float_new(inner_prod(*(s->getData()), vec_multiplier));
	} else {
		rb_raise(rb_eArgError, "Can only multiply RealVector by a scalar, RealVector, or Array.");
	}
	return self;
}


template<class Obtype>
VALUE method_vector_multiply_equals (VALUE self, VALUE multiplier) {
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);
	if (TYPE(multiplier) == T_FLOAT || TYPE(multiplier) == T_FIXNUM) {
		*(s->getData()) *= NUM2DBL(multiplier);
	} else if (TYPE(multiplier) == T_DATA && CLASS_OF(multiplier) == rb_RealVector::rb_class()) {
		rb_RealVector *o;
		Data_Get_Struct(multiplier, rb_RealVector, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To multiply RealVectors together, use vectors of the same length.");

		self = rb_float_new(inner_prod(*(s->getData()), *(o->getData())));
	} else if (TYPE(multiplier) == T_DATA && CLASS_OF(multiplier) == rb_RealVectorReference::rb_class()) {
		rb_RealVectorReference *o;
		Data_Get_Struct(multiplier, rb_RealVectorReference, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To multiply RealVectors together, use vectors of the same length.");

		self = rb_float_new(inner_prod(*(s->getData()), *(o->getData())));

	} else if (TYPE(multiplier) == T_ARRAY) {
		if (RARRAY_LEN(multiplier) != (int)s->getData()->size())
			rb_raise(rb_eArgError, "To multiply RealVectors together, use vectors of the same length.");

		RealVector vec_multiplier = rb_ary_to_1d_realvector(multiplier);
		self = rb_float_new(inner_prod(*(s->getData()), vec_multiplier));
	} else {
		rb_raise(rb_eArgError, "Can only multiply RealVector by a scalar, RealVector, or Array.");
	}
	return self;
}


template<class Obtype>
VALUE method_vector_divide_equals (VALUE self, VALUE divider) {
	if (TYPE(divider) == T_FLOAT || TYPE(divider) == T_FIXNUM) {
		Obtype *s;
		Data_Get_Struct(self, Obtype, s);
		*(s->getData()) /= NUM2DBL(divider);
	} else {
		rb_raise(rb_eArgError, "Can only divide RealVector by a number");
	}
	return self;
}


template<class Obtype>
VALUE method_vector_divide (VALUE self, VALUE divider) {
	if (TYPE(divider) == T_FLOAT || TYPE(divider) == T_FIXNUM) {
		Obtype *s;
		Data_Get_Struct(self, Obtype, s);
		return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(*(s->getData()) / NUM2DBL(divider))
			);
	} else {
		rb_raise(rb_eArgError, "Can only divide RealVector by a number");
	}
	return self;
}

template<class Obtype>
VALUE method_vector_add (VALUE self, VALUE rb_vector) {
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);

	if (TYPE(rb_vector) == T_ARRAY) {
		if (RARRAY_LEN(rb_vector) != (int)s->getData()->size())
			rb_raise(rb_eArgError, "To sum RealVectors, use vectors of the same length.");

		RealVector summer;
		summer = rb_ary_to_1d_realvector(rb_vector);

		return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(*(s->getData()) + summer)
			);
	} else if (TYPE(rb_vector) == T_DATA && CLASS_OF(rb_vector) == rb_RealVector::rb_class()) {
		rb_RealVector *o;
		Data_Get_Struct(rb_vector, rb_RealVector, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To sum RealVectors, use vectors of the same length.");

		return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(*(s->getData()) + *(o->getData()))
			);
	} else if (TYPE(rb_vector) == T_DATA && CLASS_OF(rb_vector) == rb_RealVectorReference::rb_class()) {
		rb_RealVectorReference *o;
		Data_Get_Struct(rb_vector, rb_RealVectorReference, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To sum RealVectors, use vectors of the same length.");

		return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(*(s->getData()) + *(o->getData()))
			);
	} else if (TYPE(rb_vector) == T_FLOAT || TYPE(rb_vector) == T_FIXNUM) {

		return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(*(s->getData()) + shark::blas::repeat(NUM2DBL(rb_vector), s->getData()->size()))
			);
	} else {
		rb_raise(rb_eArgError, "RealVectors can be sum only with Arrays, other RealVectors, or numbers.");
	}
	return self;
}


template<class Obtype>
VALUE method_vector_add_equals (VALUE self, VALUE rb_vector) {
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);

	if (TYPE(rb_vector) == T_ARRAY) {
		if (RARRAY_LEN(rb_vector) != (int)s->getData()->size())
			rb_raise(rb_eArgError, "To sum RealVectors, use vectors of the same length.");

		RealVector summer;
		summer = rb_ary_to_1d_realvector(rb_vector);
		*(s->getData()) += summer;
	} else if (TYPE(rb_vector) == T_DATA && CLASS_OF(rb_vector) == rb_RealVector::rb_class()) {
		rb_RealVector *o;
		Data_Get_Struct(rb_vector, rb_RealVector, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To sum RealVectors, use vectors of the same length.");

		*(s->getData()) += *(o->getData());
	} else if (TYPE(rb_vector) == T_DATA && CLASS_OF(rb_vector) == rb_RealVectorReference::rb_class()) {
		rb_RealVectorReference *o;
		Data_Get_Struct(rb_vector, rb_RealVectorReference, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To sum RealVectors, use vectors of the same length.");

		*(s->getData()) += *(o->getData());
	} else if (TYPE(rb_vector) == T_FLOAT || TYPE(rb_vector) == T_FIXNUM) {
		*(s->getData()) += shark::blas::repeat(NUM2DBL(rb_vector), s->getData()->size());
	} else {
		rb_raise(rb_eArgError, "RealVectors can be sum only with Arrays and other RealVectors");
	}
	return self;
}

template<class Obtype>
VALUE method_vector_remove (VALUE self, VALUE rb_vector) {
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);

	if (TYPE(rb_vector) == T_ARRAY) {
		if (RARRAY_LEN(rb_vector) != (int)s->getData()->size())
			rb_raise(rb_eArgError, "To substract RealVectors, use vectors of the same length.");

		RealVector summer;
		summer = rb_ary_to_1d_realvector(rb_vector);

		return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(*(s->getData()) - summer)
			);
	} else if (TYPE(rb_vector) == T_DATA && CLASS_OF(rb_vector) == rb_RealVector::rb_class()) {
		rb_RealVector *o;
		Data_Get_Struct(self, rb_RealVector, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To substract RealVectors, use vectors of the same length.");

		return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(*(s->getData()) - *(o->getData()))
			);
	} else if (TYPE(rb_vector) == T_FLOAT || TYPE(rb_vector) == T_FIXNUM) {

		return wrap_pointer<rb_RealVector>(
			rb_RealVector::rb_class(),
			new rb_RealVector(*(s->getData()) - shark::blas::repeat(NUM2DBL(rb_vector), s->getData()->size()))
			);
	} else {
		rb_raise(rb_eArgError, "RealVectors can be substract only with Arrays and other RealVectors");
	}
	return self;
}

template<class Obtype>
VALUE method_vector_remove_equals (VALUE self, VALUE rb_vector) {
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);

	if (TYPE(rb_vector) == T_ARRAY) {
		if (RARRAY_LEN(rb_vector) != (int)s->getData()->size())
			rb_raise(rb_eArgError, "To sum RealVectors, use vectors of the same length.");

		RealVector summer;
		summer = rb_ary_to_1d_realvector(rb_vector);
		*(s->getData()) -= summer;
	} else if (TYPE(rb_vector) == T_DATA && CLASS_OF(rb_vector) == rb_RealVector::rb_class()) {
		rb_RealVector *o;
		Data_Get_Struct(self, rb_RealVector, o);

		if (o->getData()->size() != s->getData()->size())
			rb_raise(rb_eArgError, "To sum RealVectors, use vectors of the same length.");

		*(s->getData()) -= *(o->getData());
	} else if (TYPE(rb_vector) == T_FLOAT || TYPE(rb_vector) == T_FIXNUM) {
		*(s->getData()) -= shark::blas::repeat(NUM2DBL(rb_vector), s->getData()->size());
	} else {
		rb_raise(rb_eArgError, "RealVectors can be sum only with Arrays and other RealVectors");
	}
	return self;
}

template<class Obtype>
VALUE method_vector_negate (VALUE self) {
	Obtype *v;
	Data_Get_Struct(self, Obtype, v);

	return wrap_pointer<rb_RealVector>(
		rb_RealVector::rb_class(),
		new rb_RealVector(-(*(v->getData())))
	);
}

template<class Obtype>
VALUE method_vector_to_ary (VALUE self) {
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);
	return realvector_to_rb_ary(*(s->getData()));
}

template<class Obtype>
VALUE method_vector_to_matrix (int number_of_arguments, VALUE* ruby_arguments, VALUE self) {
	VALUE height, width;
	rb_scan_args(
		number_of_arguments,
		ruby_arguments,
		"02",
		&height,
		&width);
	rb_RealVector *v;
	int mat_height, mat_width;
	Data_Get_Struct(self, rb_RealVector, v);
	if (height == Qnil && width == Qnil) {
		mat_height = v->getData()->size();
		mat_width  = 1;
	} else if (TYPE(height) == T_FIXNUM && width == Qnil) {
		if (NUM2INT(height) <= 0)
			rb_raise(rb_eArgError, "RealMatrix cannot (or will not, or cannot stand) have(ing) a negative height.");
		if (v->getData()->size() % NUM2INT(height) != 0)
			rb_raise(rb_eArgError, "The specified dimension is incompatible with the vector's length (must be a divisor of the vector' length to be allowable).");
		mat_width = v->getData()->size()/NUM2INT(height);
		mat_height = NUM2INT(height);
	} else {
		Check_Type(height, T_FIXNUM);
		Check_Type(width, T_FIXNUM);
		if (NUM2INT(height) <= 0)
			rb_raise(rb_eArgError, "RealMatrix cannot (or will not, or cannot stand) have(ing) a negative height.");
		if (NUM2INT(width) <= 0)
			rb_raise(rb_eArgError, "RealMatrix cannot (or will not, or cannot stand) have(ing) a negative width.");
		if (v->getData()->size() - (NUM2INT(height) * NUM2INT(width)) != 0)
			rb_raise(rb_eArgError, "The product of the height and width is not equal to the length of the vector, therefore the resulting Matrix would be off to a bad start.");
		mat_width  = NUM2INT(width);
		mat_height = NUM2INT(height);
	}
	RealMatrix mat(mat_height, mat_width);

	int pos = 0;
	for (int i=0; i < mat_height; i++) {
		row(mat, i) = subrange(*(v->getData()), pos, pos + mat_width);
		pos += mat_width;
	}
	return wrap_pointer<rb_RealMatrix>(
			rb_RealMatrix::rb_class(),
			new rb_RealMatrix(mat)
		);
}


template<class Obtype>
VALUE method_vector_stride (VALUE self) {
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);
	return INT2FIX(s->getData()->stride());
}

template<class Obtype>
VALUE method_vector_fill (VALUE self, VALUE filling) {
	if (TYPE(filling) != T_FLOAT && TYPE(filling) != T_FIXNUM)
		rb_raise(rb_eArgError, "Can only fill RealVector with floats.");
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);
	std::fill(s->getData()->begin(), s->getData()->end(), NUM2DBL(filling));
	return self;
}

template<class Obtype>
VALUE method_vector_query (VALUE self, VALUE position) {
	Check_Type(position, T_FIXNUM);
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);
	if (NUM2INT(position) < 0) {
		if (NUM2INT(position) < int(-(s->getData()->size())))
			rb_raise(rb_eArgError, "Out of range.");
		// to get last element ask for -1 for instance:
		return rb_float_new((*(s->getData()))[s->getData()->size()+NUM2INT(position)]);
	} else {
		if (NUM2INT(position) >= int(s->getData()->size()))
			rb_raise(rb_eArgError, "Out of range.");
		// ordered normally
		return rb_float_new((*(s->getData()))[NUM2INT(position)]);
	}
}

template<class Obtype>
VALUE method_vector_insert (VALUE self, VALUE position, VALUE assignment) {
	Check_Type(position, T_FIXNUM);
	if (TYPE(assignment) != T_FIXNUM && TYPE(assignment) != T_FLOAT)
		rb_raise(rb_eArgError, "Can only insert floats in RealVector.");
	Obtype *s;
	Data_Get_Struct(self, Obtype, s);
	if (NUM2INT(position) < 0) {
		if (NUM2INT(position) < int(-(s->getData()->size())))
			rb_raise(rb_eArgError, "Out of range.");
		// to get last element ask for -1 for instance:
		(*(s->getData()))[s->getData()->size()+NUM2INT(position)] = NUM2DBL(assignment);
	} else {
		if (NUM2INT(position) >= int(s->getData()->size()))
			rb_raise(rb_eArgError, "Out of range.");
		// ordered normally
		(*(s->getData()))[NUM2INT(position)] = NUM2DBL(assignment);
	}
	return self;
}

template<class Obtype, class OtherObtype>
VALUE method_vector_compare(VALUE left, VALUE right) {
	Obtype *v;
	OtherObtype *other_v;
	Data_Get_Struct(left, Obtype, v);
	Data_Get_Struct(right, OtherObtype, other_v);
	// check size
	if (other_v->getData()->size() != v->getData()->size())
		return Qfalse;
	// check each element... can parallelize this.
	for (size_t i = 0; i<v->getData()->size(); i++)
		if ((*(other_v->getData()))(i) != (*(v->getData()))(i))
			return Qfalse;
	return Qtrue;
}

template<class Obtype>
VALUE method_vector_soft_eql(VALUE self, VALUE rb_other) {
	if (TYPE(rb_other) == T_DATA) {
		VALUE other_class = CLASS_OF(rb_other);
		if (other_class == rb_RealVector::rb_class()) {
			return method_vector_compare<Obtype, Obtype>(self, rb_other);
		} else if (other_class == rb_RealVectorReference::rb_class()) {
			return method_vector_compare<Obtype, rb_RealVectorReference>(self, rb_other);
		} else if (other_class == rb_RealMatrixColumn::rb_class()) {
			return method_vector_compare<Obtype, rb_RealMatrixColumn>(self, rb_other);
		} else if (other_class == rb_RealMatrixRow::rb_class()) {
			return method_vector_compare<Obtype, rb_RealMatrixRow>(self, rb_other);
		} else {
			return Qfalse;
		}
	} else if (TYPE(rb_other) == T_ARRAY) {
		VALUE self_ary = method_vector_to_ary<Obtype>(self);
		return rb_funcall(self_ary, rb_intern("=="), 1, rb_other);
	} else {
		return Qfalse;
	}
}

template<class Obtype>
VALUE method_vector_eql(VALUE self, VALUE rb_other) {
	if (TYPE(rb_other) == T_DATA) {
		if (CLASS_OF(rb_other) != CLASS_OF(self))
			return Qfalse;
		return method_vector_compare<Obtype, Obtype>(self, rb_other);
	} else {
		return Qfalse;
	}
}

template<class Obtype>
void Init_VectorMinMethods () {
	Init_VectorLength<Obtype>();
	Init_DatatypeDeepCopy<Obtype, rb_RealVector>();
	rb_define_method(Obtype::rb_class(), "to_pgm", (rb_method)method_vector_export_pgm<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "sqrt", (rb_method)method_vector_get_sqrt<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "sum", (rb_method)method_vector_get_sum<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "mean", (rb_method)method_vector_get_mean<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "min", (rb_method)method_vector_get_min<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "max", (rb_method)method_vector_get_max<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "inverse", (rb_method)method_vector_get_inverse<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "exp", (rb_method)method_vector_get_exp<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "log", (rb_method)method_vector_get_log<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "to_a", (rb_method)method_vector_to_ary<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "remove_NaN", (rb_method) method_vector_remove_NaN<Obtype>,-1);
	rb_define_method(Obtype::rb_class(), "==", (rb_method) method_vector_soft_eql<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "eql?", (rb_method) method_vector_eql<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "to_matrix", (rb_method)method_vector_to_matrix<Obtype>,-1);
	rb_define_method(Obtype::rb_class(), "*", (rb_method)method_vector_multiply<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "**", (rb_method)method_vector_get_pow<Obtype>, 1);
	rb_define_alias(Obtype::rb_class(), "power", "**");
	rb_define_alias(Obtype::rb_class(), "pow", "**");
	rb_define_method(Obtype::rb_class(), "*=", (rb_method)method_vector_multiply_equals<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "/", (rb_method)method_vector_divide<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "/=", (rb_method)method_vector_divide_equals<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "+", (rb_method)method_vector_add<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "+=", (rb_method)method_vector_add_equals<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "-=", (rb_method)method_vector_remove_equals<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "clear", (rb_method)method_vector_clear<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "-", (rb_method)method_vector_remove<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "-@", (rb_method)method_vector_negate<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "stride", (rb_method)method_vector_stride<Obtype>,0);
	rb_define_method(Obtype::rb_class(), "fill", (rb_method)method_vector_fill<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "[]", (rb_method)method_vector_query<Obtype>,1);
	rb_define_method(Obtype::rb_class(), "[]=", (rb_method)method_vector_insert<Obtype>,2);
}